#!/usr/bin/env python

# Copyright (c) 2024 Platform9 systems. All rights reserved

# pylint: disable=too-many-locals

import logging
import random
import requests
import string
import sys
import os
import errno
from argparse import ArgumentParser

from firkinize.configstore.consul import Consul
from firkinize.database.mysqldb import MySqlDatabase

LOG_DIR = '/var/log/pf9/'

logging.basicConfig(level=logging.DEBUG)
LOG = logging.getLogger(__name__)

def mkdir_p(dir_path):
    """Create directories recursively."""
    try:
        os.makedirs(dir_path)
    except OSError as ex:
        if ex.errno != errno.EEXIST:
            raise

class MorsConfig:
    def __init__(self, consul, customer_uuid, region_uuid):
        self._consul = consul
        self._customer_uuid = customer_uuid
        self._region_uuid = region_uuid
        self._customer_prefix = f'customers/{self._customer_uuid}/'
        self._region_prefix = f'{self._customer_prefix}regions/{self._region_uuid}/'
        self._mors_prefix = f'{self._region_prefix}services/mors/'

    def _add_keystone_endpoint(self):
        key = f'customers/{self._customer_uuid}/regions/{self._region_uuid}/fqdn'
        fqdn = self._consul.kv_get(key)
        url = f'https://{fqdn}/mors'
        prefix = f'customers/{self._customer_uuid}/keystone/endpoints/{self._region_uuid}/mors/'
        updates = {
            f'{prefix}type': 'mors',
            f'{prefix}internal_url': url,
            f'{prefix}admin_url': url,
            f'{prefix}public_url': url
        }
        self._consul.kv_put_txn(updates)

    def _copy_keystone_uris(self):
        keystone_url = 'http://localhost:8080/keystone'
        updates = {os.path.join(self._mors_prefix, 'keystone_uris/keystone'): keystone_url}
        self._consul.kv_put_txn(updates)

    def configure_keystone(self):
        self._add_keystone_endpoint()
        self._add_keystone_user(f'{self._customer_prefix}keystone/users/mors/', self._mors_prefix, 'mors')
        
        self._copy_keystone_uris()

    def _add_keystone_user(self, global_keystone_prefix, service_prefix, user):
        updates = {}
        password = self._get_password(service_prefix, 'keystone/password')
        for prefix in [global_keystone_prefix, f'{service_prefix}keystone_user/']:
            updates.update({
                f'{prefix}email': user,
                f'{prefix}password': password,
                f'{prefix}project': 'services',
                f'{prefix}role': 'admin'
            })
        self._consul.kv_put_txn(updates)
        LOG.info(f'Added {user} user')

    def add_rabbit_users(self):
        mors_amqp_prefix = f"{self._mors_prefix}amqp/"
        rabbit_broker_mors_prefix = f"{self._region_prefix}rabbit_broker/users/mors/"
        password = self._get_password(mors_amqp_prefix, 'password')
        rabbit_config = {
            'username': 'mors',
            'password': password,
            'config': '.*',
            'write': '.*',
            'read': '.*'
        }
        self._consul.kv_put_txn(
            {f'{prefix}{key}': value for prefix in [mors_amqp_prefix, rabbit_broker_mors_prefix] for key, value in
             rabbit_config.items()})

    def _create_db_and_grant_privileges(self, root_dbinfo, mors_dbinfo, consul_key_prefix):
        """
        Create the database using the location and admin credentials associated
        with the dbserver in mors's dbserver_key. Also, add a user and grant
        permissions.
        """
        shortname = self._consul.kv_get(f'customers/{self._customer_uuid}/shortname')
        LOG.info('Creating database for customer %s', shortname)
        db = MySqlDatabase(host=root_dbinfo['host'], port=int(root_dbinfo['port']), admin_user=root_dbinfo['user'],
                           admin_pass=root_dbinfo['password'])
        db_created = db.check_create_db(root_dbinfo['name'])
        grants_updated = db.check_add_grants(db_name=mors_dbinfo['name'], db_user=mors_dbinfo['user'],
                                             db_pass=mors_dbinfo['password'])

        if db_created or grants_updated:
            LOG.info('Database was updated, updating config store with '
                     'values: %s',
                     {k: v for (k, v) in mors_dbinfo.items()
                      if k != 'password'})
            with self._consul.prefix(consul_key_prefix):
                self._consul.kv_put_txn(mors_dbinfo)

    def configure_db(self):
        """
        Configure the database by fetching the necessary parameters from Consul.
        """
        try:
            db_server_key = self._consul.kv_get(f"{self._region_prefix}dbserver")
            db_server_prefix = f"{self._customer_prefix}dbservers/{db_server_key}/"
            dbkey = f'{self._mors_prefix}db/'

            db_server = self._consul.kv_get_prefix(db_server_prefix)
            dbspec = self._consul.kv_get_prefix(dbkey)

            host = db_server[f'{db_server_prefix}host']
            port = db_server[f'{db_server_prefix}port']
            mors_db = dbspec.get(f'{dbkey}name', 'mors')

            root_dbinfo = {
                'user': db_server[f'{db_server_prefix}admin_user'],
                'password': db_server[f'{db_server_prefix}admin_pass'],
                'name': mors_db, 'host': host, 'port': port
            }
            mors_dbinfo = {
                'user': dbspec.get(f'{dbkey}user', 'mors'),
                'password': dbspec.get(f'{dbkey}password', _random_string()),
                'name': mors_db, 'host': host, 'port': port
            }

        except KeyError as e:
            LOG.error(f'The dbserver_key specified for mors has missing components: {e}')
            return
        except requests.HTTPError as e:
            LOG.error(f'HTTP error occurred: {e}')
            return
        except Exception as e:
            LOG.error(f'Unexpected error: {e}')
            return
        else:
            self._create_db_and_grant_privileges(root_dbinfo, mors_dbinfo, dbkey)
    
    def _get_password(self, prefix, key):
        with self._consul.prefix(prefix):
            try:
                return self._consul.kv_get(key)
            except requests.HTTPError as e:
                if e.response.status_code == 404:
                    LOG.info(f'Generating new password for {prefix}{key}')
                    return _random_string()
                raise
    
def _random_string():
    """
    16 random numbers and letters, always starts with a letter.
    """
    secret_len = 16
    secret_chars = string.ascii_letters + string.digits
    return ''.join(
        [random.SystemRandom().choice(string.ascii_letters)] + [random.SystemRandom().choice(secret_chars) for _ in
                                                                range(secret_len - 1)])

def parse_args():
    parser = ArgumentParser(description='Initialize keystone for a region')
    parser.add_argument('--config-url', default='http://localhost:8500',
                        help='Address of the config node, default http://localhost:8500')
    parser.add_argument('--config-token', help='Config access token')
    parser.add_argument('--customer-id', required=True, help='The keystone customer id')
    parser.add_argument('--region-id', required=True, help='The region id for which to bootstrap the keystone endpoint')
    return parser.parse_args()

def main():
    mkdir_p(LOG_DIR)
    args = parse_args()
    consul = Consul(args.config_url, args.config_token)
    config = MorsConfig(consul, args.customer_id, args.region_id)

    config.configure_keystone()
    config.add_rabbit_users()
    config.configure_db()

if __name__ == '__main__':
    sys.exit(main())
